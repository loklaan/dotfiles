#|------------------------------------------------------------|#
#| Security                                                   |#
#|                                                            |#
#|  The following setup does the following:                   |#
#|   1. Override common ssh enables commands                  |#
#|   2. When any of them are used, ssh-add is lazily executed |#
#|   3. Finally, we start ssh-agent which will enable ssh-add |#
#|                                                            |#
#|------------------------------------------------------------|#
#| TODO: Add GPG agent restarts, similar to SSH agent

export _SSH_AGENT_INFO_CACHE=$HOME/.cache/ssh-agent-info

_ssh_add() {
  [ "$SSH_CONNECTION" ] && return

  if [ "$(_is_ssh_agent_active)" = "false" ]; then
    echo "Inactive ssh-agent. Restarting..."
    _ssh_agent
  fi

  local key=$HOME/.ssh/id_rsa

  ssh-add -l >/dev/null || ssh-add $key
}

ssh() {
  _ssh_add
  command ssh "$@"
}

scp() {
  _ssh_add
  command scp "$@"
}

git() {
  case $1 in
      push|pull|fetch|clone)
          _ssh_add
          ;;
  esac

  command git "$@"
}

_is_ssh_agent_active() {
  [ -f $_SSH_AGENT_INFO_CACHE ] && . $_SSH_AGENT_INFO_CACHE >/dev/null

  local ssh_agent_running="$([ "$SSH_AGENT_PID" ] && kill -0 $SSH_AGENT_PID 2>/dev/null && echo "true" || echo "false")"
  local ssh_agent_sock_exists="$([ -S "$SSH_AUTH_SOCK" ] && echo "true" || echo "false" )"

  if [ "$ssh_agent_running" = "false" ] || [ "$ssh_agent_sock_exists" = "false" ]; then
    echo "false";
  else
    echo "true";
  fi
}

_ssh_agent() {
  command -v ssh-agent >/dev/null || return
  [ "$SSH_CONNECTION" ] && return

  if [ "$(_is_ssh_agent_active)" = "false" ]; then
    echo "Setting ssh-agent instance details..."
    mkdir -p "$(dirname "$_SSH_AGENT_INFO_CACHE")"
    local ssh_agent_cmd=$(ssh-agent)
    echo "$ssh_agent_cmd" > "$_SSH_AGENT_INFO_CACHE"
  fi

  eval $(cat "$_SSH_AGENT_INFO_CACHE") >/dev/null
}

_ssh_agent

#|------------------------------------------------------------|#
#| Misc                                                       |#
#|------------------------------------------------------------|#

bgnotify_threshold=8

# Github tokens
export GITHUB_TOKEN={{ (bitwardenFields "item" "dotfiles").github_auth_token.value }}
export HOMEBREW_GITHUB_API_TOKEN=$GITHUB_TOKEN

# Android studio
export ANDROID_HOME=~/Library/Android/sdk
export PATH="$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH"

# Playdate SDK
export PLAYDATE_SDK_PATH="$HOME/Developer/PlaydateSDK"
export PATH="$PLAYDATE_SDK_PATH/bin:$PATH"

# Php crap
export PATH="$PATH:$HOME/.composer/vendor/bin"

# Dart / Flutter
# The "flutter" cask links to /usr/local/bin
# The "flutter" cask has the dart sdk at: /usr/local/Caskroom/flutter/<version>/bin/cache/dart-sdk

# Make `less` show emoji / unicode
#export LESS="-${LESS}r"

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
# VcxSrv Display (WSL hosted UIs)
export DISPLAY=${DISPLAY:-$(grep -Po '(?<=nameserver ).*' /etc/resolv.conf):0}
{{   end }}
{{ end }}

{{ if eq .chezmoi.os "darwin" }}
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
{{ end }}

_add_completions() {
  # AWS CLI Autocomplete
  if [ -f /usr/local/bin/aws_completer ] && which aws >/dev/null; then
    complete -C '/usr/local/bin/aws_completer' aws;
  fi
}