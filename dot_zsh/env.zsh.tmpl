#|------------------------------------------------------------|#
#| Env variables                                              |#
#|------------------------------------------------------------|#

# Locale
export LC_ALL=en_AU.UTF-8
export LANG=en_AU.UTF-8
export LANGUAGE=en_AU.UTF-8
export DEFAULT_USER=loch
export EDITOR='subl -w'

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH:$HOME/.local/bin"


ulimit -n 10240 # Raises the limit for open files, which is important for large git repos
bgnotify_threshold=8

# Github tokens
export GITHUB_TOKEN={{ (bitwardenFields "item" "dotfiles").github_auth_token.value }}

# Homebrew
export HOMEBREW_GITHUB_API_TOKEN=$GITHUB_TOKEN
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_EMOJI=1
export HOMEBREW_NO_INSECURE_REDIRECT=1

# XDG
export XDG_CACHE_HOME="$HOME/Library/Caches"
export XDG_DATA_HOME="$HOME/.local/share"

# Android studio
export ANDROID_HOME="$HOME/Library/Android/sdk"
export PATH="$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH"

# Playdate SDK
export PLAYDATE_SDK_PATH="$HOME/Developer/PlaydateSDK"
export PATH="$PLAYDATE_SDK_PATH/bin:$PATH"

# Fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# Node crap
export NODE_MAX_OLD_SPACE_SIZE=8192
export N_PREFIX="$HOME/.n";
export PATH="$N_PREFIX/bin:$PATH"
export PATH="./node_modules/.bin:$PATH"

# Python crap
export PATH="$PATH:$HOME/.gem/bin"
if type pyenv > /dev/null; then eval "$(pyenv init -)"; fi

# Rust crap
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
export PATH="$HOME/.cargo/bin:$PATH"

# Php crap
export PATH="$PATH:$HOME/.composer/vendor/bin"

# Nix
test -e "$HOME/.nix-profile/etc/profile.d/nix.sh" && source "$HOME/.nix-profile/etc/profile.d/nix.sh"

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
# VcxSrv Display (WSL hosted UIs)
export DISPLAY=${DISPLAY:-$(grep -Po '(?<=nameserver ).*' /etc/resolv.conf):0}
{{   end }}
{{ end }}

#|------------------------------------------------------------|#
#| Env libraries                                              |#
#|------------------------------------------------------------|#

for lib in $HOME/.zsh/lib/*.zsh
do
  source $lib
done

#|------------------------------------------------------------|#
#| Env agents                                                 |#
#|------------------------------------------------------------|#

if typeset -f _ssh_agent > /dev/null; then
  _ssh_agent
fi
export GPG_TTY=$(tty)

#|------------------------------------------------------------|#
#| Env auto completions                                       |#
#|------------------------------------------------------------|#

_add_env_completions() {
  if [ -f {{ .homebrew.prefix }}/bin/aws_completer ] && which aws >/dev/null; then
    complete -C '{{ .homebrew.prefix }}/bin/aws_completer' aws;
  fi
}