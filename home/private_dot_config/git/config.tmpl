[alias]
  squish = squash
  st = status
  co = checkout
  cp = cherry-pick
  ls = ls-files
  staged = diff --staged
  # Colourful graph, kawaii
  lg = log --graph --pretty=format:'%C(ul yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  rh = reset --hard
  rbc = rebase --continue
  rbf = "!cd -- \"${GIT_PREFIX:-.}\" && [ x$# != x1 ] && echo branch required >&2 || git fetch origin \"$1\":\"$1\" && git rebase \"$1\" #"
  cpc = cherry-pick --continue
  # Reset to parent commit and keep the commit changes in *stage*
  undo = reset --soft HEAD^
  # Removes local tracking references for since-removed remote branches
  prune = fetch --prune
  # Woops, correct that last commit ~LIT~
  amend = commit --amend
  amend-then = commit --amend --no-edit -C HEAD
  amend-now = !git commit --amend --no-edit -C HEAD --date=\"$(date)\"
  # Often want to stash new files
  stash-all = stash --incude-untracked
  # Branches that have since been merged (should probably be deleted)
  branch-merged = branch --merged
  branch-remote-merged = branch -r --merged
  # Copies content of done.commit into the message of a new commit
  commit-done = commit -eF done.commit
  mergein = merge --no-ff
  who = !git-who
  # Do it once for new remote branches
  track = "!git push -u origin `git symbolic-ref --short HEAD`"

[user]
  name = Lochlan Bunn
  email = {{ .email }}
{{- if ne "" .signingKey }}
  signingkey = {{ .signingKey }}
{{- end }}

[github]
  user = loklaan
  token = {{ (bitwardenFields "item" "dotfiles").github_auth_token.value }}
  apiKey = {{ (bitwardenFields "item" "dotfiles").github_auth_token.value }}

[gpg]
  program = gpg

[commit]
  # Show diff of staged changes in commit message editor
  # Use --no-verbose flag to temporarily disable this behavior
  verbose = true
{{ if ne "" .signingKey -}}
  gpgsign = true
{{- end }}

[push]
  # Make git push only affect the current branch
  default = simple
  # Automatically configure upstream tracking when pushing new branches
  autoSetupRemote = true
  # Push tags to remote when pushing commits
  followtags = true

[pull]
  # Always rebase local changes on top of fetched changes instead of merging
  # Merge commits are more trouble than they're worth
  rebase = true

[fetch]
  # Remove stale remote-tracking branches when fetching
  prune = true
  # Remove stale tags when fetching
  pruneTags = true
  # Fetch from all remotes, not just origin
  all = true

[status]
  # Show all untracked files in directories, not just directory names
  showuntrackedfiles = all

[branch]
  # Sort branches by most recently committed first
  sort = -committerdate

[tag]
  # Sort tags by version number if semantic versioning is used
  sort = version:refname

[help]
  # Prompt before automatically correcting mistyped commands
  autocorrect = prompt

[merge]
  # Adds third merge marker in files, that sections original text
  conflictstyle = zdiff3
  tool = intellij

[mergetool "intellij"]
  cmd = idea merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
  trustExitCode = true

[mergetool]
  # Never create backup .orig files after merge conflict resolution
  # Save disk space and remove clutter when resolving merge conflicts
  keepBackup = false

[rebase]
  # Automatically squash/fixup commits marked with those prefixes during rebase
  autoSquash = true
  # Automatically stash and pop uncommitted changes when rebasing
  autoStash = true
  # If you have branches that depend on each other (e.g., feature branch based on another feature branch),
  # this will automatically update the dependent branches' refs when rebasing their base branches.
  # Example: If branch B is based on branch A, and you rebase A onto main,
  # branch B's base commit will be updated to point to A's new position.
  updateRefs = true

[transfer]
  # Enforce strict data integrity by verifying objects during transfer
  # Block corrupted objects from being downloaded or uploaded
  # Disable temporarily with '-c transfer.fsckObjects=false' when needed e.g. installing oh-my-zsh
  fsckobjects = true

[init]
  # Set the default branch name when creating new repositories
  # Use 'main' instead of legacy 'master' for inclusive naming conventions
  defaultBranch = main

[core]
  # https://github.com/so-fancy/diff-so-fancy
  #editor = vim
  # Ensure a VS Code window opens and blocks until closed, for commit messages
  editor = 'code' --wait
  # Speed up filesystem status operations by maintaining untracked file cache
  # Note: May need occasional `git update-index --untracked-cache` if cache becomes stale
  # or `git update-index --really-refresh` if showing incorrect status
  untrackedcache = true
  # Speed up filesystem status operations by using OS filesystem monitoring
  fsmonitor = true

[diff]
  # https://github.com/jeffkaufman/icdiff
  # Good for side-by-side diffs, as opposed inline-paging
  # CURRENTLY BROKEN??
  # tool = icdiff
  # https://github.com/blog/2188-git-2-9-has-been-released#beautiful-diffs
  #
  # Ensure changes are shown compactly when lines are moved within a file
  compactionHeuristic = true
  # Use histogram algorithm for comparing changes, optimized for finding similar code blocks
  algorithm = histogram
  # Show moved lines of code in different colors without extra markers or syntax
  colorMoved = plain
  # Use shortened mnemonics in diff output (i.e., a/file.txt instead of full path)
  # A "mnemonic" is a pattern that helps remember or reference something - in programming, it's often a shortened/memorable name
  mnemonicPrefix = true
  # Detect files that were renamed between commits
  renames = true

[difftool]
  # Do not prompt for confirmation before each invocation of the diff tool
  prompt = false

[difftool "icdiff"]
  # Background is ~LIT~, as opposed to foreground colors
  cmd = icdiff -H --line-numbers $LOCAL $REMOTE

[pager]
  diff = delta --diff-so-fancy
  log = delta --diff-so-fancy
  reflog = delta --diff-so-fancy
  show = delta --diff-so-fancy

[delta]
  plus-style = "syntax #012800"
  minus-style = "syntax #340001"
  syntax-theme = "none" # Not an actual theme - I just prefer white text for diffs
  navigate = true
  line-numbers = true

[rerere]
  # Remember and replay conflict resolutions for identical conflicts
  enabled = true
  # After remembering a resolution, auto-stage resolution in future conflicts
  autoupdate = true

[interactive]
  diffFilter = delta --diff-so-fancy --color-only

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[gc]
  # Ensure garbage collection runs automatically after ~4000 loose objects accumulate
  auto = 4000
  # Ensure garbage collection runs in background to prevent blocking repository operations
  # Significantly improves performance for large repositories, for day-to-day commands
  autoDetach = true

[protocol]
  # Ensure Git uses protocol version 2 for improved performance and efficiency
  # This protocol version is more efficient for fetching and pushing, reducing data transfer
  # and network round trips compared to protocol version 1
  version = 2

[column]
  # Arrange output in columns where UI elements are shown (e.g. git branch)
  ui = auto

[color]
  # Enable colored output for all Git commands when appropriate
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

# Set work-only config, such as work email, work signing key, etc.
[includeIf "gitdir:~/dev/canva/**"]
  path = ~/.config/git/canva.config
